// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  email      String       @unique
  name       String
  password   String
  role       Role         @default(USER)
  articles   Articles[]
  Categories Categories[]
  profile    Profile?
  photo      Photo?
  stats      Stats[]

  @@map("users")
}

model Categories {
  id       String       @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  parent   Categories?  @relation("Subcategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String?      @map("parent_id") @db.ObjectId // Campo opcional que armazena o ID da categoria pai
  children Categories[] @relation("Subcategories") // Relacionamento com as subcategorias
  author   Users        @relation(fields: [authorId], references: [id])
  authorId String       @unique @db.ObjectId
  articles Articles[] // Relacionamento com os artigos

  @@map("categories")
}

model Articles {
  id  String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  tub_img     String?
  // images      Photo[]
  images  Images[]
  content     String
  category    Categories @relation(fields: [categoryId], references: [id])
  categoryId  String     @db.ObjectId
  author      Users      @relation(fields: [authorId], references: [id])
  authorId    String     @db.ObjectId
  comments    Comment[]

  @@map("articles")
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  content   String
  article   Articles? @relation(fields: [articleId], references: [id])
  articleId String    @db.ObjectId
  createdAt DateTime  @default(now())

  @@map("comments")
}

model Stats {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  author     Users    @relation(fields: [authorId], references: [id])
  authorId   String   @unique @db.ObjectId
  categories Int      @default(0) // Contador de categorias
  articles   Int      @default(0) // Contador de artigos
  createdAt  DateTime @default(now()) // Data de criação do registro

  @@map("stats")
}

model Images {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String?
  size      Int
  key       String
  article   Articles? @relation(fields: [articleId], references: [id])
  articleId String?   @db.ObjectId
  createdAt DateTime  @default(now())

  @@map("images")
}

enum Role {
  USER
  ADMIN
}

type Profile {
  bio     String?
  address Address?
}

type Address {
  country String
  street  String
  city    String
  zipCode String
}

type Photo {
  name String
  url  String?
  size Int
  key  String
}
